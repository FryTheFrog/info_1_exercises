#!/usr/bin/env python3

from unittest import TestCase
from unittest.mock import mock_open, patch
import ast, types
import math

# catch potential exception from import
try:
    from public.script import WordLogic
except Exception:
    # Just make sure that all tests are still executed to have a stable number of points.
    # An appropriate warning is generated by the smoke tests.
    pass

filename = 'resource/words.txt'
with open(filename) as f:
    read_data = f.read()
    word_list = [word.rstrip().upper() for word in read_data.split('\n')]

class PrivateTestSuite(TestCase):

    @patch('builtins.open', new_callable=mock_open, read_data=read_data)
    def test_compute_similarity(self, mock_open):
        num_words = 7
        logic = WordLogic(num_words, 4)
        from inspect import signature
        try:
            sig = signature(logic.is_similar)
            m = "@@The is_similar function should have exactly three parameters (besides self).@@"
            self.assertEqual(len(sig.parameters), 3, m)
            m = "@@The is_similar function does not return a boolean. It should return True or False.@@"
            res = logic.is_similar('AELB', 'ABLE', 0.5)
            self.assertEqual(type(res), bool, m)
            m = "@@The is_similar function returns true even if the similarity is lower than threshold.@@"
            self.assertFalse(logic.is_similar('AELB', 'ABLE', 0.5), m)
            self.assertFalse(logic.is_similar('ZZZZ', 'ABLE', 0.5), m)
            m = "@@The is_similar function returns false even if the similarity is higher than threshold.@@"
            self.assertTrue(logic.is_similar('ABEL', 'ABLE', 0.5), m)
            self.assertTrue(logic.is_similar('ALBE', 'ABLE', 0.5), m)
            self.assertTrue(logic.is_similar('ABLZ', 'ABLE', 0.5), m)
            self.assertTrue(logic.is_similar('ABCD', 'BCDA', 0.5), m)
        except AttributeError:
            m = "@@The WordLogic class does not appear to have an is_similar method. You need to implement it.@@"
            self.fail(m)


class SolutionVisitor(ast.NodeVisitor):

    def __init__(self):
        self.hasAssignInGlobalScope = False

    def visit_If(self, node):
        try:
            if node.test.left.id == "__name__":
                return
        except:
            self.generic_visit(node)

    def visit_Assign(self, node):
        self.hasAssignInGlobalScope = True

    def visit_FunctionDef(self, node):
        return

    def visit_ClassDef(self, node):
        return

