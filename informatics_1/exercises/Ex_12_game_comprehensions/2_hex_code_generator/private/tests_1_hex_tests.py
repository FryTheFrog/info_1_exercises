#!/usr/bin/env python3

from unittest import TestCase
import ast, types
import random

# catch potential exception from import
try:
    from public.script import GameRunner
except Exception:
    # Just make sure that all tests are still executed to have a stable number of points.
    # An appropriate warning is generated by the smoke tests.
    pass


class PrivateTestSuite(TestCase):

    def test_1_hex_code_hardcoded(self):
        """This test gives 0.5 points if a non-hardcoded, non-default sample of the correct length is created"""
        sut = GameRunner()
        res = sut.generate_hex_codes()
        m = "@@Calling generate_hex_codes() does not return a list.@@"
        self.assertTrue(isinstance(res, list), m)

        m = "@@The resulting list of generate_hex_codes should contain rows*columns elements. For a {}*{} instance, it has {} though.@@".format(sut.rows, sut.columns, len(res))
        self.assertEqual(len(res), sut.rows * sut.columns, m)

        sut2 = GameRunner()
        sut2.rows = 15
        sut2.columns = 3
        m = "@@The resulting list of generate_hex_codes should contain rows*columns elements. For a {}*{} instance, it has {} elements though.@@".format(sut2.rows, sut2.columns, len(res))
        self.assertEqual(len(sut2.generate_hex_codes()), sut2.rows * sut2.columns, m)

        m = "@@All hex codes are the same.@@"
        res = list(set(res))
        ref = [res[0]]
        self.assertNotEqual(res, ref, m)

        res1 = sut.generate_hex_codes()
        res2 = sut.generate_hex_codes()
        m = "@@Hex codes appear to be hardcoded. On call of the function shoul generate different hex codes.@@"
        self.assertNotEqual(res1, res2, m)

    def test_2_hex_compulsory_code(self):
        import inspect
        source = inspect.getsource(GameRunner.generate_hex_codes)
        m = "@@You must use random.choice somewhere in your function implementation.@@"
        self.assertTrue("choice(" in source, m)
        m = "@@You must specify the exact sequence '0123456789ABCDEF' somewhere in your function implementation.@@"
        self.assertTrue("0123456789ABCDEF" in source, m)

    def test_3_hex_code_samples(self):
        random.seed(935813)
        runner = GameRunner()
        runner.rows = 5
        codes = runner.generate_hex_codes()
        m = "@@Generated hex codes seem wrong.@@"
        self.assertEqual(codes, ['0xE4AD', '0x1A72', '0x89DD', '0xB48B', '0x19B2',
                                 '0x52A9', '0xC0C7', '0xB40C', '0x118B', '0x11FD'], m)

        random.seed(1256)
        runner = GameRunner()
        codes = runner.generate_hex_codes()
        m = "@@Generated hex codes seem wrong.@@"
        self.assertEqual(codes, ['0x33ED', '0x8B29', '0x3933', '0xA3CB', '0x87D0',
                                 '0x70EF', '0x3554', '0x7545', '0x8391', '0x8DDC',
                                 '0x147F', '0xECF0', '0x17DC', '0xF608', '0xD2B6',
                                 '0x182D', '0xDA75', '0xA6AD', '0xCE81', '0xEED2',
                                 '0xC559', '0x1402', '0x1306', '0xF16D', '0x8FCA',
                                 '0xFDE9', '0xB399', '0xE361', '0x1DC4', '0x9521',
                                 '0x95E4', '0xF559', '0xA0E9', '0xB3B8'], m)


class SolutionVisitor(ast.NodeVisitor):

    def __init__(self):
        self.hasAssignInGlobalScope = False

    def visit_If(self, node):
        try:
            if node.test.left.id == "__name__":
                return
        except:
            self.generic_visit(node)

    def visit_Assign(self, node):
        self.hasAssignInGlobalScope = True

    def visit_FunctionDef(self, node):
        return

    def visit_ClassDef(self, node):
        return

